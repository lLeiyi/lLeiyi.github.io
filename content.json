{"meta":{"title":"lLeiyi的博客","subtitle":null,"description":null,"author":"lLeiyi","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2018-07-15T16:38:36.000Z","updated":"2018-07-16T16:20:54.283Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-07-16T16:31:45.000Z","updated":"2018-07-16T16:32:05.154Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"通过Arcpy发布地图服务","slug":"通过Arcpy发布地图服务","date":"2019-04-06T07:17:40.034Z","updated":"2019-04-28T15:54:57.639Z","comments":true,"path":"2019/04/06/通过Arcpy发布地图服务/","link":"","permalink":"http://yoursite.com/2019/04/06/通过Arcpy发布地图服务/","excerpt":"","text":"1.发布地图服务的流程使用 ArcPy 将地图文档自动发布到 GIS 服务器的流程分为四步： 第一步，运行 CreateMapSDDraft 函数。CreateMapSDDraft 的输出是服务定义草稿 (.sddraft) 文件，服务定义草稿由地图文档、服务器信息和一组服务属性组合而成。 第二步，使用 AnalyzeForSD 函数分析输出的服务定义草稿文件的适用性和潜在性能问题。 第三步，使用 Stage Service 地理处理工具将服务定义草稿转换为完全合并的服务定义 (.sd) 文件。过渡过程会编译成功发布 GIS 资源所需的所有必要信息。如果选择将数据复制到服务器，则将在服务定义草稿阶段添加数据。 最后，使用 上载服务定义地理处理工具上载服务定义文件并将其作为 GIS 服务发布到特定的 GIS 服务器。此步骤将获取服务定义文件、将其复制到服务器、提取所需信息并发布 GIS 资源。 2.调用函数参数详解第一步：创建草图文件CreateMapSDDraft (map_document, out_sddraft, service_name, {server_type}, {connection_file_path}, {copy_data_to_server}, {folder_name}, {summary}, {tags}) 参数 说明 类型 map_document Map Document 类型的对象，即一个mxd文档。 Map Document out_sddraft Service Definition Draft (.sddraft) 文件输出路径。 String service_name 服务的名字，由字母和数字组成，不允许使用空格或特殊字符，长度不得超过120。 String server_type 服务的类型，如果未提供「connection_file_path」参数，则必须提供「server_type」。如果提供了「connection_file_path」参数，则从连接文件中获取「 server_type」。 • ARCGIS_SERVER — ArcGIS for Server 服务类型，默认值。 • FROM_CONNECTION_FILE — 从 connection_file_path 参数获取服务类型。 • SPATIAL_DATA_SERVER — Spatial Data Server 服务类型，ArcGIS 10.2.1 版本之后就不再支持。 • MY_HOSTED_SERVICES — My Hosted Services 服务类型，应用与 ArcGIS Online 或者 Portal for ArcGIS 的托管服务。 String connection_file_path ArcGIS for Server connection file (.ags) 文件的路径。通常在ArcCatalog创建后的路径为「C:\\Users\\Administrator\\AppData\\Roaming\\ESRI\\Desktop10.2\\ArcCatalog」 String copy_data_to_server mxd文档的数据是否要拷贝到服务器中。当数据没有在服务器内被注册时，此参数应设为false，反之应设为true。 当「server_type」设置为SPATIAL_DATA_SERVER时，「copy_data_to_server」将始终为False。 Spatial Data Server 服务始终使用已注册的数据，因此不会将数据复制到服务器。 当「server_type」设置为MY_HOSTED_SERVICES时，「copy_data_to_server」将始终为True。My Hosted Maps services 服务始终将数据复制到服务器。 Boolean folder_name 服务发布的文件夹名，如果不存在则会新建，默认值None对应的是根文件夹。 String summary 服务的摘要。 String tags 服务的标签。 String 第二、三、四步可以直接在arcgis帮助文档内查看，有中文的。 3.实现代码下面是一个发布服务的例子，实现的功能是遍历一个文件夹，将文件夹内.mxd结尾的文件都发布上服务器。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153# -*- coding: utf-8 -*-import arcpyimport osimport xml.dom.minidom as DOMdef SetSddraftParam(sddraft_file_path): &apos;&apos;&apos;修改Sddraft文件的参数。（一般就修改开启WMS、WFS功能） Args: sddraft_file_path: .sddraft文件的路径。 &apos;&apos;&apos; doc = DOM.parse(sddraft_file_path) ext = doc.getElementsByTagName(&apos;Extensions&apos;)[0] svcExts = ext.childNodes for svcExt in svcExts: typename_ele = svcExt.getElementsByTagName(&apos;TypeName&apos;)[0] if typename_ele.firstChild.data == &apos;WMSServer&apos;: enable_ele = svcExt.getElementsByTagName(&apos;Enabled&apos;)[0] enable_ele.firstChild.data = &apos;true&apos; break if os.path.exists(sddraft_file_path): os.remove(sddraft_file_path) f = open(sddraft_file_path, &apos;w&apos;) doc.writexml(f) f.close()def GetAGSConnectionFile(out_folder_path): &apos;&apos;&apos;在指定文件夹新建test.ags文件。 Args: out_folder_path: .ags文件的输出文件夹路径。 Returns: 返回.ags文件的路径。 &apos;&apos;&apos; out_name = &apos;test.ags&apos; server_url = &apos;http://localhost:6080/arcgis/admin&apos; use_arcgis_desktop_staging_folder = False staging_folder_path = out_folder_path username = &apos;siteadmin&apos; password = &apos;123456&apos; out_file_path = os.path.join(out_folder_path, out_name) if os.path.exists(out_file_path): os.remove(out_file_path) arcpy.mapping.CreateGISServerConnectionFile(&apos;ADMINISTER_GIS_SERVICES&apos;, out_folder_path, out_name, server_url, &apos;ARCGIS_SERVER&apos;, use_arcgis_desktop_staging_folder, staging_folder_path, username, password, True) return out_file_pathdef PublishMxd(mxd_file_path, mxd_folder_path, con_file_path): &apos;&apos;&apos;发布服务。 Args: mxd_file_path:mxd文档的路径。 mxd_folder_path:mxd文档所在文件夹的路径。 con_file_path:服务器连接文件路径 &apos;&apos;&apos; #检查mxd文件是否存在 print &quot;Checking mxd file path...&quot; if os.path.exists(mxd_file_path) == False: print &quot;mxd file is not exist！&quot; return # 打开mxd文档 try: print &quot;Opening mxd file...&quot; mxd = arcpy.mapping.MapDocument(mxd_file_path) except Exception, e: print &quot;open mxd error: &quot;, e return # 获取默认的数据框 print &quot;Loading mxd file default dataframes...&quot; df = &quot;&quot; try: frames = arcpy.mapping.ListDataFrames(mxd, &quot;图层&quot;) if len(frames) == 0: frames = arcpy.mapping.ListDataFrames(mxd, &quot;Layers&quot;) df = frames[0] except Exception, e: print &quot;load mxd file default dataframes failed：&quot;, e return # 组织参数发布服务 mxdNameWithExt = os.path.basename(mxd_file_path) (serviceName, extension) = os.path.splitext(mxdNameWithExt) sddraft_file_path = os.path.join(mxd_folder_path, serviceName + &apos;.sddraft&apos;) summary = &apos;Test&apos; tags = &apos;Test&apos; # 创建草图文件 print &quot;CreateMapSDDraft...&quot; if os.path.exists(sddraft_file_path): os.remove(sddraft_file_path) arcpy.mapping.CreateMapSDDraft(mxd, sddraft_file_path, serviceName, &apos;ARCGIS_SERVER&apos;, con_file_path, False, None, summary, tags) # 设置草图文件内的参数（开启WMS功能，WFS功能等） SetSddraftParam(sddraft_file_path) # 分析草图文件 analysis = arcpy.mapping.AnalyzeForSD(sddraft_file_path) if analysis[&apos;errors&apos;] == &#123;&#125;: for message in analysis[&apos;messages&apos;]: print analysis[&apos;messages&apos;][message] print message[0].encode(&quot;gb2312&quot;) + &quot;(%s)&quot; % message[1] for warning in analysis[&apos;warnings&apos;]: print analysis[&apos;warnings&apos;][warning] print warning[0].encode(&quot;gb2312&quot;) + &quot;(%s)&quot; % warning[1] # 过渡服务 print &quot;StageService...&quot; sdPath = os.path.join(mxd_folder_path1, serviceName + &apos;.sd&apos;) arcpy.StageService_server(sddraft_file_path, sdPath) # 上传服务定义 print &quot;UploadServiceDefinition_server...&quot; arcpy.UploadServiceDefinition_server(sdPath, con_file_path) else: for error in analysis[&apos;errors&apos;]: print analysis[&apos;errors&apos;][error] print error[0].encode(&quot;gb2312&quot;) + &quot;(%s)&quot; % error[1]def PublishAll(mxd_folder_path): &apos;&apos;&apos;遍历指定文件夹内的所有mxd文档，并逐个发布服务。 Args: mxd_folder_path:包含mxd文档的文件夹路径。 &apos;&apos;&apos; print &quot;Check folder path...&quot; if os.path.isdir(mxd_folder_path) == False: print &quot;folder path is not exist！&quot; return print &quot;Get .ags file...&quot; con_file_path = GetAGSConnectionFile(mxd_folder_path) print &quot;******************Traversing a folder******************&quot; files = os.listdir(mxd_folder_path) mxdCount = 0 for f in files: if f.endswith(&quot;.mxd&quot;): mxdCount = mxdCount + 1 mxdNo = 1 for f in files: if f.endswith(&quot;.mxd&quot;): mxd_file_path = os.path.join(mxd_folder_path, f) print &quot;Publishing: &quot; + f + &quot;(%d/%d)&quot; % (mxdNo, mxdCount) mxdNo = mxdNo + 1 PublishMxd(mxd_file_path, mxd_folder_path, con_file_path) else: continuemxd_folder_path = r&apos;E:\\MyCode\\Mypy\\py2\\mxd&apos;publishServices.PublishAll(mxd_folder_path) ##4.备注针对上面的内容还有以下几点需要说明： mxd文件的名称不能是中文，python2.7对中文的支持不友好，总会碰到问题，所以都用英文比较好。 通过arcmap界面发布服务时设置的参数可以在sddraft草图文件内找到，并通过修改文件配置来设置CreateMapSDDraft函数没囊括的参数。另外对没有函数可以修改已发布的服务参数问题，设想可以通过重复发布服务覆盖来实现需求，但是暂时还没有尝试。 切片缓存功能还没添加。","categories":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/categories/ArcEngine/"},{"name":"Arcpy","slug":"ArcEngine/Arcpy","permalink":"http://yoursite.com/categories/ArcEngine/Arcpy/"}],"tags":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/tags/ArcEngine/"}]},{"title":"记录1","slug":"记录1","date":"2019-04-06T07:15:48.066Z","updated":"2019-04-28T16:14:10.375Z","comments":true,"path":"2019/04/06/记录1/","link":"","permalink":"http://yoursite.com/2019/04/06/记录1/","excerpt":"","text":"创建workspacefactory123456789101112131415//方式1Type factoryShpType = Type.GetTypeFromProgID(&quot;esriDataSourcesFile.ShapefileWorkspaceFactory&quot;);//ShpType factoryGdbType = Type.GetTypeFromProgID(&quot;esriDataSourcesGDB.FileGDBWorkspaceFactory&quot;);//GdbType factorySdeType = Type.GetTypeFromProgID(&quot;esriDataSourcesGDB.SdeWorkspaceFactory&quot;);//SdeType factoryMdbType = Type.GetTypeFromProgID(&quot;esriDataSourcesGDB.AccessWorkspaceFactory&quot;);//MdbType factorySqliteType = Type.GetTypeFromProgID(&quot;esriDataSourcesGDB.SqlWorkspaceFactory&quot;);//SqliteType factoryCadType = Type.GetTypeFromProgID(&quot;esriDataSourcesFile.CadWorkspaceFactory&quot;);//CadIWorkspaceFactory workspaceFactory = (IWorkspaceFactory)Activator.CreateInstance(factory***Type);------------------------------------------------------------------------------------------------------//方式2IWorkspaceFactory wksGdbFactory = new FileGDBWorkspaceFactoryClass();IWorkspaceFactory wksSdeFactory = new SdeWorkspaceFactoryClass();IWorkspaceFactory wksMdbFactory = new AccessWorkspaceFactoryClass();IWorkspaceFactory2 wksRasterFactory = new RasterWorkspaceFactoryClass(); 调用workspacefactory的方法打开数据源123456789101112//MDB,GDB,SDE文件路径string strDbPath = &quot;文件路径&quot;;IWorkspace wks = wksFactory.OpenFromFile(strDbPath, 0);//SDE也可通过连接信息打开IPropertySet propSet=new PropertySetClass();propSet.SetProperty(&quot;server&quot;,&quot;服务器机器名&quot; );propSet.SetProperty(&quot;instance&quot;,&quot;SDE运行的端口号&quot;);propSet.SetProperty(&quot;user&quot;,&quot;用户名&quot;);propSet.SetProperty(&quot;password&quot;,&quot;口令&quot; );propSet.SetProperty(&quot;password&quot;,&quot;口令&quot; );IWorkspace wks = wksFactory.Open(propSet, 0); PS：获取MDB，GDB文件路径时要注意，“右键数据库文件=》属性=》安全=》对象名称”，此处的文件路径有问题，如要选路径可从资源管理器的文件路径复制。string connectionString = string.Format(“Provider=ESRI.GeoDB.OleDB.1;Data Source={0};Extended Properties=workspacetype=esriDataSourcesGDB.FileGDBWorkspaceFactory.1;Geometry=WKB”, strDbPath); 导入导出数据高效的方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273 /// &lt;summary&gt; /// 要素类的转移 /// &lt;/summary&gt; /// &lt;param name=&quot;sourceWorkspace&quot;&gt;源数据工作空间（shp）&lt;/param&gt; /// &lt;param name=&quot;targetWorkspace&quot;&gt;目标数据工作空间（mdb）&lt;/param&gt; /// &lt;param name=&quot;nameOfSourceFeatureClass&quot;&gt;源要素类名&lt;/param&gt; /// &lt;param name=&quot;nameOfTargetFeatureClass&quot;&gt;目标要素类名&lt;/param&gt; /// &lt;param name=&quot;queryFilter&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; private bool IFeatureDataConverter_ConvertFeatureClass(IWorkspace sourceWorkspace, IWorkspace targetWorkspace,string nameOfSourceFeatureClass, string nameOfTargetFeatureClass, IQueryFilter queryFilter) &#123; //创建一个源数据的工作空间的name IDataset sourceWorkspaceDataset = (IDataset)sourceWorkspace; IWorkspaceName sourceWorkspaceName = (IWorkspaceName)sourceWorkspaceDataset.FullName; //创建源数据Name作为转换参数 IFeatureClassName sourceFeatureClassName = new FeatureClassNameClass(); IDatasetName sourceDatasetName = (IDatasetName)sourceFeatureClassName; sourceDatasetName.WorkspaceName = sourceWorkspaceName; //这个参数不能乱填（shp文件就是文件名没后缀，FeatureClass或者FeatureDataset就是AliasName） sourceDatasetName.Name = nameOfSourceFeatureClass; //创建目标（导出）数据空间的name IDataset targetWorkspaceDataset = (IDataset)targetWorkspace; IWorkspaceName targetWorkspaceName = (IWorkspaceName)targetWorkspaceDataset.FullName; //创建目标数据Name作为转换参数 IFeatureClassName targetFeatureClassName = new FeatureClassNameClass(); IDatasetName targetDatasetName = (IDatasetName)targetFeatureClassName; targetDatasetName.WorkspaceName = targetWorkspaceName; //这个命名也很重要，如果是mdb，那么这个命名在数据库中必须是本来不存在的（当然你可以先清空数据库） targetDatasetName.Name = nameOfTargetFeatureClass; //根据FetureClassName打开数据 ESRI.ArcGIS.esriSystem.IName sourceName = (ESRI.ArcGIS.esriSystem.IName)sourceFeatureClassName; IFeatureClass sourceFeatureClass = (IFeatureClass)sourceName.Open(); //在两个不同的工作空间转换数据要检查字段的有效性 //一些检查有效性的参数 IFieldChecker fieldChecker = new FieldCheckerClass(); IFields targetFeatureClassFields; IFields sourceFeatureClassFields = sourceFeatureClass.Fields; IEnumFieldError enumFieldError; //设置检查有效性的源数据工作空间 fieldChecker.InputWorkspace = sourceWorkspace; fieldChecker.ValidateWorkspace = targetWorkspace; //（这个函数没有返回值我不知道它如何确定有效性滴） fieldChecker.Validate(sourceFeatureClassFields, out enumFieldError, out targetFeatureClassFields); //通过输出字段循环找出几何字段 IField geometryField; //遍历字段 for (int i = 0; i &lt; targetFeatureClassFields.FieldCount; i++) &#123; //找到定义几何要素类型的字段 if (targetFeatureClassFields.get_Field(i).Type == esriFieldType.esriFieldTypeGeometry) &#123; //获取当前字段 geometryField = targetFeatureClassFields.get_Field(i); //编辑几何要素类型字段 IGeometryDef geometryDef = geometryField.GeometryDef; IGeometryDefEdit targetFCGeoDefEdit = (IGeometryDefEdit)geometryDef; //说实话，下面两行我实在不知道用处。。。参数也是看文档抄袭的 targetFCGeoDefEdit.GridCount_2 = 1; targetFCGeoDefEdit.set_GridSize(0, 0); //保证空间参考 SpatialReference_2属性字段才是可写的，SpatialReference属性只可读 targetFCGeoDefEdit.SpatialReference_2 = geometryField.GeometryDef.SpatialReference; //开始转换 IFeatureDataConverter myConvert = new FeatureDataConverterClass(); myConvert.ConvertFeatureClass(sourceFeatureClassName, queryFilter, null, targetFeatureClassName, geometryDef, targetFeatureClassFields, &quot;&quot;, 1000, 0); return true; &#125; &#125; return false; &#125;","categories":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/categories/ArcEngine/"},{"name":"记录","slug":"ArcEngine/记录","permalink":"http://yoursite.com/categories/ArcEngine/记录/"}],"tags":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/tags/ArcEngine/"},{"name":"IWorkspace","slug":"IWorkspace","permalink":"http://yoursite.com/tags/IWorkspace/"}]},{"title":"踩过的坑1","slug":"踩过的坑1","date":"2019-04-06T07:15:47.979Z","updated":"2019-04-28T16:14:01.425Z","comments":true,"path":"2019/04/06/踩过的坑1/","link":"","permalink":"http://yoursite.com/2019/04/06/踩过的坑1/","excerpt":"","text":"ArcEngine中featurecursor分别在sde数据库和gdb数据库下的遍历问题问题描述平常用到的遍历featureclass的语句在gdb、mdb和sde下有些细节需要注意。 123456//一般的循环遍历步骤IFeatureCursor featureCursor = featureClass.Search(null,false);IFeature feature = null;while((feature = featureCursor.NextFeature())!=null)&#123;&#125; 最后遍历到feature为null后退出while循环，这时如果再执行一次featureCursor.NextFeature()语句： 1.在gdb和mdb数据库下会得到null； 2.在sde数据库下会得到“调用的函数顺序有误 [Function called out of sequence]”的报错。 ArcEngine中IMap的选择集刷新问题问题描述通过以下方式可以很便捷的往选择集内添加要素，但是却无法触发AxMapControl下的OnSelectionChanged事件。 12345678910111213public static void SelectFeatures(IFeatureLayer featureLayer, int[] OIDs)&#123; if (pFeatureLayer == null || OIDs == null) &#123; return; &#125; IFeatureSelection featureSelection = featureLayer as IFeatureSelection; if (featureSelection != null) &#123; IGeoDatabaseBridge2 geoDatabaseBridge2 = new GeoDatabaseHelperClass(); geoDatabaseBridge2.AddList(featureSelection.SelectionSet, ref OIDs); &#125;&#125; 通过ISelectEvents接口解决可以通过ISelectEvents接口来解决这个问题,该接口可由IMap接口QI。 12345ISelectionEvents selectEvents = map as ISelectionEvents;if (selectEvents != null)&#123; selectEvents.SelectionChanged();&#125;","categories":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/categories/ArcEngine/"},{"name":"踩过的坑","slug":"ArcEngine/踩过的坑","permalink":"http://yoursite.com/categories/ArcEngine/踩过的坑/"}],"tags":[{"name":"ArcEngine","slug":"ArcEngine","permalink":"http://yoursite.com/tags/ArcEngine/"},{"name":"IFeaturecursor","slug":"IFeaturecursor","permalink":"http://yoursite.com/tags/IFeaturecursor/"},{"name":"ISelectEvents","slug":"ISelectEvents","permalink":"http://yoursite.com/tags/ISelectEvents/"}]}]}